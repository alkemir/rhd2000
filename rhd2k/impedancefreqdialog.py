from PyQt5.QtWidgets import QDialog, QLineEdit, QLabel, QHBoxLayout, QDialogButtonBox, QVBoxLayout

# Electrode impedance measurement frequency selection dialog.
# Allows users to select a measurement frequency, while validating
# the the frequency lies within an acceptable range.


class ImpedanceFreqDialog(QDialog):
    def __init__(self, desiredImpedanceFreq, lowerBandwidth, upperBandwidth, dspCutoffFreq, dspEnabled, sampleRate, parent):
        super().__init__(parent)

        # Lower frequency limit based on sample rate: FPGA command RAM can only hold 1024 commands,
        # so this limits the period of the sinusoidal waveform generated by the impedance test DAC.
        self.lowerLimitSample = sampleRate / 1024.0

        # Upper frequency limit based on sample rate: It is difficult to accurately approximate
        # a sine wave (using the on-chip impedance test DAC) in fewer than 4 steps per period.
        self.upperLimitSample = sampleRate / 4.0

        # Lower frequency limit based on amplifier bandwidth:  We should stay at least 1.5X above
        # the effective lower amplifier bandwidth of the amplifier so that our impedance
        # measurements are not affected by a roll-off in gain.  (This may be overly conservative.)
        effectiveLowerBandwidth = lowerBandwidth
        if dspEnabled:
            if dspCutoffFreq > lowerBandwidth:
                effectiveLowerBandwidth = dspCutoffFreq
        self.lowerLimitBandwidth = effectiveLowerBandwidth * 1.5

        # Upper frequency limit based on amplifier bandwidth:  We should stay at least 1.5X below
        # the effective upper amplifier bandwidth of the amplifier so that our impedance
        # measurements are not affected by a roll-off in gain.  (This may be overly conservative.)
        self.upperLimitBandwidth = upperBandwidth / 1.5

        self.impedanceFreqLineEdit = QLineEdit("%.0f" % desiredImpedanceFreq)
        self.impedanceFreqLineEdit.textChanged.connect(
            self.onLineEditTextChanged)

        sampleRangeText = "The sampling rate of "
        sampleRangeText += "%.2f" % (sampleRate / 1000.0)
        sampleRangeText += " kS/s retricts this range to "
        sampleRangeText += "%.1f" % self.lowerLimitSample
        sampleRangeText += " Hz to "
        sampleRangeText += "%.0f" % self.upperLimitSample
        sampleRangeText += " Hz."
        self.sampleRangeLabel = QLabel(sampleRangeText)

        self.bandwidth1RangeLabel = QLabel("For acceptable accuracy, the frequency should "
                                           "lie within the amplifier bandwidth by a factor of 1.5.")
        self.bandwidth1RangeLabel.setWordWrap(True)

        bandwidthRangeText = "This restricts the measurement frequency range to "
        bandwidthRangeText += "%.1f" % self.lowerLimitBandwidth
        bandwidthRangeText += " Hz to "
        bandwidthRangeText += "%.0f" % self.upperLimitBandwidth
        bandwidthRangeText += " Hz."
        self.bandwidth2RangeLabel = QLabel(bandwidthRangeText)

        impedanceFreqSelectLayout = QHBoxLayout()
        impedanceFreqSelectLayout.addWidget(
            QLabel("Electrode Impedance Measurement Frequency"))
        impedanceFreqSelectLayout.addWidget(self.impedanceFreqLineEdit)
        impedanceFreqSelectLayout.addWidget(QLabel("Hz"))
        impedanceFreqSelectLayout.addStretch(1)

        self.buttonBox = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel)

        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        mainLayout = QVBoxLayout()
        mainLayout.addLayout(impedanceFreqSelectLayout)
        mainLayout.addWidget(self.sampleRangeLabel)
        mainLayout.addWidget(self.bandwidth1RangeLabel)
        mainLayout.addWidget(self.bandwidth2RangeLabel)
        mainLayout.addWidget(self.buttonBox)

        self.setLayout(mainLayout)
        self.setWindowTitle("Select Electrode Impedance Measurement Frequency")
        self.onLineEditTextChanged()

    # Validate entry, and enable OK button if entry is valid.
    def onLineEditTextChanged(self):
        value = float(self.impedanceFreqLineEdit.text())
        inRange = True

        if value < self.lowerLimitSample or value > self.upperLimitSample:
            self.sampleRangeLabel.setStyleSheet("color: red")
            inRange = False
        else:
            self.sampleRangeLabel.setStyleSheet("")

        if value < self.lowerLimitBandwidth or value > self.upperLimitBandwidth:
            self.bandwidth1RangeLabel.setStyleSheet("color: red")
            self.bandwidth2RangeLabel.setStyleSheet("color: red")
            inRange = False
        else:
            self.bandwidth1RangeLabel.setStyleSheet("")
            self.bandwidth2RangeLabel.setStyleSheet("")
        self.buttonBox.button(QDialogButtonBox.Ok).setEnabled(inRange)
